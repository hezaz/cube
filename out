/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   cub3d.h                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: baptistevieilhescaze <baptistevieilhesc    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/03/28 19:58:56 by codespace         #+#    #+#             */
/*   Updated: 2024/06/21 14:54:28 by baptistevie      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef INCLUDES_H
# define INCLUDES_H

/************* lib ******************/
# include <stdbool.h>
# include <stdlib.h>
# include <fcntl.h>
# include "../libft/libft.h"

/*********** minilibx ***************/
# include "../mlx/mlx.h"
# include <X11/X.h>
# include <X11/keysym.h>

/************* inc ******************/
# include "struct.h"
# include "define.h"


/**                 FUNCTIONS                   **/

/********** get_map.c **************/
t_map	*get_map(char *path);
t_map	*init_map(void);
void	get_map_dim(t_map *map, char *path);

/********** get_map_utils.c ********/
bool	is_texture_line(char *line);
bool	is_map_line(char *line);
void	get_texture_line(t_map *map, char *line);
void	get_map_line(t_map *map, char *line, int *row);

/************* error.c *************/
void    ft_error(char *msg);
void	*garbage_collector(void *ptr, bool clean);

/************* hooks.c *************/
int	handle_no_event(void *data);
int	handle_input(int keysym, t_mlx *data);
int	handle_keypress(int keysym, t_mlx *data);
int	handle_keyrelease(int keysym, void *data);

/************* img.c *************/
void	img_pix_put(t_img *img, int x, int y, int color);

/********** display_2d.c *************/
void	draw_tile(int x, int y, int color, t_game *data);
void	draw_map(t_game *data);

/********** render.c *************/
int render_2d(t_game *data);

/********** init.c *************/
t_map	*init_map(void);
t_mlx	*init_mlx(void);
t_img	*init_img(void);
t_game	*init_game(void);



#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   define.h                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: baptistevieilhescaze <baptistevieilhesc    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/19 16:13:25 by bvieilhe          #+#    #+#             */
/*   Updated: 2024/07/03 13:52:20 by baptistevie      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef DEFINE_H
# define DEFINE_H

# define WINDOW_WIDTH	600
# define WINDOW_HEIGHT	300

# define BLUE_PIXEL		0xFF
# define GREEN_PIXEL	0xFF00
# define RED_PIXEL		0xFF0000
# define BLACK_PIXEL	0xFFFFFF
# define WHITE_PIXEL	0x0

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   struct.h                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bvieilhe <bvieilhe@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/03/28 19:40:47 by codespace         #+#    #+#             */
/*   Updated: 2024/07/12 15:07:14 by bvieilhe         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef STRUCT_H
# define STRUCT_H

typedef struct s_img
{
    void	*mlx_img;
    char	*addr;
    int		bpp;
    int		line_len;
    int		endian;
}	t_img;

typedef struct s_mlx
{
	void	*mlx_ptr;
	void	*win_ptr;

}	t_mlx;

typedef struct s_texture
{
	char	*east_wall;
	char	*west_wall;
	char	*north_wall;
	char	*south_wall;
	char	*floor;
	char	*ceiling;
}	t_texture;

typedef struct s_map
{
	char		**map;
	int			height;
	int			width;
	t_texture	*texture;
}	t_map;

typedef struct s_game
{
	t_mlx	*mlx;
	t_map	*map;
	t_img	img;
}	t_game;

#endif/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   display_2d.c                                       :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: baptistevieilhescaze <baptistevieilhesc    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/19 16:34:34 by bvieilhe          #+#    #+#             */
/*   Updated: 2024/07/10 15:00:55 by baptistevie      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

void	draw_tile(int x, int y, int color, t_game *data)
{
	int	tile_width;
	int	tile_height;
	int	i;
	int	j;

	tile_width = WINDOW_WIDTH / data->map->width;
	tile_height = WINDOW_HEIGHT / data->map->height;
	i = x * tile_width;
	while (i < tile_width * (x + 1))
	{
		j = 0;
		while (j < tile_height * (y + 1))
		{
			img_pix_put(data->img, i, j, color);
			j++;
		}
		i++;
	}
}

void	draw_map(t_game *data)
{
	int	i;
	int	j;

	i = 0;
	while (i < data->map->width)
	{
		j = 0;
		while (j < data->map->height)
		{
			if (data->map->map[i][j] == '1')
				draw_tile(i, j, BLACK_PIXEL, data);
			else if (data->map->map[i][j] == 0)
				draw_tile(i, j, WHITE_PIXEL, data);
			else
				draw_tile(i, j, RED_PIXEL, data);
			j++;
		}
		i++;
	}
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   error.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: codespace <codespace@student.42.fr>        +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/06 12:43:25 by codespace         #+#    #+#             */
/*   Updated: 2024/06/06 13:11:41 by codespace        ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

void    ft_error(char *msg)
{
	ft_putstr_fd("Error\n", 2);
	ft_putstr_fd(msg, 2);
	ft_putstr_fd("\n", 2);
}

static void	delete(void *ptr);

void	*garbage_collector(void *ptr, bool clean)
{
	static t_list	*garbage_list;

	if (clean)
	{
		ft_lstclear(&garbage_list, delete);
		return (NULL);
	}
	else
	{
		ft_lstadd_back(&garbage_list, ft_lstnew(ptr));
		return (ptr);
	}
}

static void	delete(void *ptr)
{
	free(ptr);
	ptr = NULL;
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_map.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bvieilhe <bvieilhe@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/05/30 13:27:29 by codespace         #+#    #+#             */
/*   Updated: 2024/06/25 18:48:26 by bvieilhe         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

t_map	*get_map(char *path)
{
	int	fd;
	int	map_row;
	char	*line;
	t_map	*map;

	map = init_map();
	map->height++;
	get_map_dim(map, path);
	map->map = malloc(sizeof(char *) * map->height);
	if (!map->map)
		ft_error("[get_map(...)] : map->map malloc failed");
	garbage_collector(map->map, false);
	fd = open(path, O_RDONLY);
	if (fd < 0)
		ft_error("[get_map(...)] : opened file returned < 0");
	line = get_next_line(fd);

	map_row = 0;
	while (line)
	{
		if (*line != '\n')
		{
			if (is_texture_line(line))
				get_texture_line(map, line);
			else if (is_map_line(line))
				get_map_line(map, line, &map_row);
		}
		free(line);
		line = get_next_line(fd);
	}
	free(line);
	return (map);
}	

void	get_map_dim(t_map *map, char *path)
{
	int		fd;
	char	*line;

	fd = open(path, O_RDONLY);
	if (fd < 0)
		ft_error("[get_map_dim(...)] : opened file returned < 0");
	line = get_next_line(fd);
	while (line)
	{
		if (*line != '\n' && is_map_line(line))
		{
			(map->height)++;
			if ((int)ft_strlen(line) > map->width)
				map->width = ft_strlen(line);
		}
		free (line);
		line = get_next_line(fd);
	}
	free(line);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   get_map_utils.c                                    :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bvieilhe <bvieilhe@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/05/30 14:25:48 by codespace         #+#    #+#             */
/*   Updated: 2024/06/25 18:38:40 by bvieilhe         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

bool	is_texture_line(char *line)
{
	return (ft_strnstr(line, "NO", 2) || ft_strnstr(line, "SO", 2)
			|| ft_strnstr(line, "EA", 2) || ft_strnstr(line, "WE", 2)
			|| ft_strnstr(line, "F", 1) || ft_strnstr(line, "C", 1));
}

bool	is_map_line(char *line)
{
	int	i;

	i = 0;
	while (line[i])
	{
		if (line[i] != '0' && line[i] != ' '
			&& line[i] != '1' && line[i] != 'N'
			&& line[i] != 'S' && line[i] != 'W'
			&& line[i] != 'E' && line[i] != '\n')
			return (false);
		i++;
	}
	return (true);
}

void	get_texture_line(t_map *map, char *line)
{
	if (ft_strnstr(line, "NO", 2))
		map->texture->north_wall = line + 3;
	if (ft_strnstr(line, "SO", 2))
		map->texture->south_wall = line + 3;
	if (ft_strnstr(line, "EA", 2))
		map->texture->east_wall = line + 3;
	if (ft_strnstr(line, "WE", 2))
		map->texture->west_wall = line + 3;
	if (ft_strnstr(line, "C", 1))
		map->texture->ceiling = line + 2;
	if (ft_strnstr(line, "F", 1))
		map->texture->floor = line + 2;
}

void	get_map_line(t_map *map, char *line, int *row)
{
	int	i;

	map->map[*row] = malloc((map->width + 1) * sizeof(char));
	if (!map->map[*row])
		ft_error("[get_map_line(...)] : malloc failed");
	garbage_collector(map->map[*row], false);
	i = 0;
	while (line[i] && i < map->width) // i or i+1 to handle the '\n' ? do we handle when lines are smallest than map->width?
	{
		map->map[*row][i] = line[i];
		i++; 
	}
	map->map[*row][i] = '\0';
	(*row)++;
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   hooks.c                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: baptistevieilhescaze <baptistevieilhesc    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/16 17:18:47 by baptistevie       #+#    #+#             */
/*   Updated: 2024/06/16 17:38:31 by baptistevie      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

int	handle_no_event(void *data)
{
    /* This function needs to exist, but it is useless for the moment */
	(void) data;
    return (0);
}

int	handle_input(int keysym, t_mlx *data)
{
    if (keysym == XK_Escape)
        mlx_destroy_window(data->mlx_ptr, data->win_ptr);
    return (0);
}

int	handle_keypress(int keysym, t_mlx *data)
{
    if (keysym == XK_Escape)
        mlx_destroy_window(data->mlx_ptr, data->win_ptr);

    ft_printf("Keypress: %d\n", keysym);
    return (0);
}

int	handle_keyrelease(int keysym, void *data)
{
	(void) data;
    ft_printf("Keyrelease: %d\n", keysym);
    return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   img.c                                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bvieilhe <bvieilhe@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/18 15:46:32 by bvieilhe          #+#    #+#             */
/*   Updated: 2024/06/19 16:05:49 by bvieilhe         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

void	img_pix_put(t_img *img, int x, int y, int color)
{
    char    *pixel;
    int		i;

    i = img->bpp - 8;
    pixel = img->addr + (y * img->line_len + x * (img->bpp / 8));
    while (i >= 0)
    {
        if (img->endian != 0)
            *pixel++ = (color >> i) & 0xFF;
        else
            *pixel++ = (color >> (img->bpp - 8 - i)) & 0xFF;
        i -= 8;
    }
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   init.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: baptistevieilhescaze <baptistevieilhesc    +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/20 17:28:11 by baptistevie       #+#    #+#             */
/*   Updated: 2024/06/21 15:01:28 by baptistevie      ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

t_map	*init_map(void)
{
	t_map	*map;

	map = malloc(sizeof(t_map));
	if (!map)
		ft_error("[init_map(...)] : t_map malloc failed");
	garbage_collector(map, false);
	map->height = 0;
	map->width = 0;
	map->texture = malloc(sizeof(t_texture));
	if (!map->texture)
		ft_error("[init_map(...)] : t_texture malloc failed");
	garbage_collector(map->texture, false);
	return (map);
}

t_mlx	*init_mlx(void)
{
	t_mlx	*mlx;

	mlx = malloc(sizeof(t_mlx));
	if (!mlx)
		ft_error("[init_mlx(...)] : t_mlx malloc failed");
	garbage_collector(mlx, false);
	return (mlx);
}

t_img	*init_img(void)
{
	t_img	*image;

	image = malloc(sizeof(t_img));
	if (!image)
		ft_error("[init_img(...)] : t_img malloc failed");
	garbage_collector(image, false);
	image->mlx_img = NULL;
	image->addr = NULL;
	image->bpp = 0;
	image->line_len = 0;
	image->endian = 0;
	return (image);
}

t_game	*init_game(void)
{
	t_game	*game;

	game = malloc(sizeof(t_game));
	if (!game)
		ft_error("[init_game(...)] : t_game malloc failed");
	garbage_collector(game, false);
	game->map = init_map();
	game->mlx = init_mlx();
	game->img = init_img();
	return (game);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bvieilhe <bvieilhe@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/03/28 19:36:50 by codespace         #+#    #+#             */
/*   Updated: 2024/06/25 18:30:02 by bvieilhe         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

// /*********************** TESTING FUNCTIONS *******************/

// void    print_map(t_map *map)
// {
//     int i;

//     i = 0;
//     while (i < map->heigh)
//     {
//         ft_printf(map->map[i]);
//         i++;
//     }
//     ft_printf("\n");
// }

// void    print_texture(t_texture *texture)
// {
//     ft_printf("NO = %s", texture->north_wall);
//     ft_printf("SO = %s", texture->south_wall);
//     ft_printf("EA = %s", texture->east_wall);
//     ft_printf("WE = %s", texture->west_wall);
//     ft_printf("C = %s", texture->ceiling);
//     ft_printf("F = %s", texture->floor);
// }


// /************************** MAIN *****************************/


// int main(int ac, char **av)
// {
//     t_map   map;

//     if (ac == 2)
//     {
//         map = *(get_map(av[1]));
//         print_map(&map);
//         print_texture(map.texture);
//     }
//     return (1);
// }

#define MLX_ERROR 1

void	render_background(t_img *img, int color)
{
    int	i;
    int	j;

    i = 0;
    while (i < WINDOW_HEIGHT)
    {
        j = 0;
        while (j < WINDOW_WIDTH)
        {
            img_pix_put(img, j++, i, color);
        }
        ++i;
    }
}

int	main(int ac, char **av)
{
    t_game	*data;

    data = init_game();
    if (ac != 2)
        return (0);

    data->mlx->mlx_ptr = mlx_init();
    if (data->mlx->mlx_ptr == NULL)
        return (MLX_ERROR);
    data->mlx->win_ptr = mlx_new_window(data->mlx->mlx_ptr, WINDOW_WIDTH, WINDOW_HEIGHT, "cub3d");
    if (data->mlx->win_ptr == NULL)
    {
        free(data->mlx->win_ptr);
        return (MLX_ERROR);
    }

    data->map = get_map(av[1]);
    data->img->mlx_img = mlx_new_image(data->mlx->mlx_ptr, WINDOW_WIDTH, WINDOW_HEIGHT);
	data->img->addr = mlx_get_data_addr(data->img->mlx_img, &data->img->bpp,
			&data->img->line_len, &data->img->endian);

    /* Setup hooks */ 
    mlx_loop_hook(data->mlx->mlx_ptr, &render_2d, &data);
    mlx_hook(data->mlx->win_ptr, KeyPress, KeyPressMask, &handle_keypress, &data);
    mlx_hook(data->mlx->win_ptr, KeyRelease, KeyReleaseMask, &handle_keyrelease, &data);

    mlx_loop(data->mlx->mlx_ptr);

    /* we will exit the loop if there's no window left, and execute this code */
    mlx_destroy_display(data->mlx->mlx_ptr);
    free(data->mlx->mlx_ptr);

    return (1);
}/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   render.c                                           :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: bvieilhe <bvieilhe@student.42.fr>          +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2024/06/19 16:26:37 by bvieilhe          #+#    #+#             */
/*   Updated: 2024/07/12 15:03:47 by bvieilhe         ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "cub3d.h"

int render_2d(t_game *data)
{
	draw_map(data);
	mlx_put_image_to_window(data->mlx->mlx_ptr, data->mlx->win_ptr,
							data->img.mlx_img, 0, 0);
	return (0);
}
NO ./path_to_the_north_texture
SO ./path_to_the_south_texture
WE ./path_to_the_west_texture
EA ./path_to_the_east_texture

F 220,100,0
C 225,30,0

        1111111111111111111111111
        1000000000110000000000001
        1011000001110000000000001
        1001000000000000000000001
111111111011000001110000000000001
100000000011000001110111111111111
11110111111111011100000010001
11110111111111011101010010001
11000000110101011100000010001
10000000000000001100000010001
10000000000000001101010010001
11000001110101011111011110N0111
11110111 1110101 101111010001
11111111 1111111 111111111111# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: baptistevieilhescaze <baptistevieilhesc    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/06/01 12:45:26 by codespace         #+#    #+#              #
#    Updated: 2024/06/21 14:58:28 by baptistevie      ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

# NAME	=		cub3D

# SRCS_FILES	=	get_map.c \
# 				get_map_utils.c \
# 				error.c \
# 				main.c

# INC_FILES	= cub3d.h

# SRCS	=	$(addprefix src/, $(SRCS_FILES))

# INCS	=	$(addprefix inc/, $(INC_FILES))

# CC		=	clang

# CFLAGS	=	-Wall -Wextra -Werror -I./inc -g3

# INCLUDES	= -I. -Imlx/.

# LIB		= -Lmlx -lmlx -lXext -lX11 -Llibft -lft -lm

# OBJS_FILES	=	$(SRCS_FILES:%.c=%.o)

# OBJS	=		$(addprefix objs/, $(OBJS_FILES))

# DEP		=		$(OBJS:%.o=%.d)

# all		:		$(NAME)

# $(NAME)	:	$(OBJS)
# 	make -C libft
# 	make -C mlx
# 	$(CC) $(CFLAGS) $(INCLUDES) -o $(NAME) $(OBJS) $(LIB)

# clean	:
# 	make -C libft fclean
# 	make -C mlx clean
# 	rm -rf $(OBJS) $(DEP)
# 	rm -rf objs/

# fclean	:	clean
# 	rm -rf $(NAME)

# re		:	fclean all

# objs/%.o	: src/%.c $(INCS)
# 	mkdir -p objs
# 	$(CC) $(CFLAGS) -MMD -o $@ -c $<

# .PHONY: all clean fclean re

NAME = cub3d

CC = cc
CFLAGS = -Wall -Wextra -Werror -g3

RM = rm
RMFLAG = -f

UNAME = $(shell uname)

ifeq ($(UNAME), Linux)
	INCLUDES = -I/usr/include -Imlx -Iinc
	MLX_FLAGS = -Lmlx -lmlx -L/usr/lib/X11 -lXext -lX11 -lm
else ifeq ($(UNAME), Darwin)
	INCLUDES = -I/opt/X11/include -Imlx -Iinc
	MLX_FLAGS = -Lmlx -lmlx -L/usr/X11/lib -lXext -lX11 -framework OpenGL -framework AppKit
endif

MLX_DIR = ./mlx
MLX_LIB = $(MLX_DIR)/libmlx_$(UNAME).a

LIBFT_DIR = ./libft
LIBFT_LIB = $(LIBFT_DIR)/libft.a
LIBFT_FLAGS	= -Llibft -lft

SRCS_FILES	=	display_2d.c \
				error.c \
				get_map_utils.c \
				get_map.c \
				hooks.c \
				img.c \
				init.c \
				main.c \
				render.c

INC_FILES	= cub3d.h

SRCS	=	$(addprefix src/, $(SRCS_FILES))
INCS	=	$(addprefix inc/, $(INC_FILES))

OBJS = $(SRCS:.c=.o)

all: $(MLX_LIB) $(LIBFT_LIB) $(NAME)

.c.o:
	$(CC) $(CFLAGS) -c -o $@ $< $(INCLUDES)

$(NAME): $(OBJS)
	$(CC) $(CFLAGS) -o $(NAME) $(OBJS) $(MLX_FLAGS) $(LIBFT_FLAGS)

$(MLX_LIB):
	@make -C $(MLX_DIR)

$(LIBFT_LIB):
	@make -C $(LIBFT_DIR)

clean:
	$(RM) $(RMFLAG) $(OBJS)

fclean: clean
	$(RM) $(RMFLAG) $(NAME)
	if [ -d "./mlx" ]; then make -C $(MLX_DIR) clean; fi
	if [ -d "./libft" ]; then make -C $(LIBFT_DIR) fclean; fi

re: fclean all

.PHONY: all clean run fclean re 